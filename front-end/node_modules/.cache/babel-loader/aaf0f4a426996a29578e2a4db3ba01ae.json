{"ast":null,"code":"var _jsxFileName = \"/Users/joeyhu/Desktop/University/Unimelb/CloudComputing/A2/comp90024/src/Widget/Widget.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Widget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleModal = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        hideWidget: !this.state.hideWidget\n      });\n    };\n\n    this.handleCollapse = () => {\n      let heightValue = this.state.collapseWidget ? 'auto' : 0;\n      this.setState({\n        height: heightValue,\n        collapseWidget: !this.state.collapseWidget,\n        reloading: false\n      });\n    };\n\n    this.closeWithModal = () => {\n      this.toggleModal();\n      this.handleClose();\n    };\n\n    this.handleExpand = () => {\n      this.setState({\n        height: 'auto',\n        collapseWidget: false\n      });\n    };\n\n    this.handleReload = () => {\n      const {\n        widgetType,\n        updateWidgetData\n      } = this.props;\n      const type = widgetType;\n\n      if (type) {\n        updateWidgetData(type);\n      }\n\n      this.setState({\n        reloading: true\n      });\n      let endpoint = false;\n\n      if (!endpoint) {\n        setTimeout(() => this.setState({\n          reloading: false\n        }), 2000);\n      } else {\n        this.setState({\n          reloading: true\n        });\n        fetch('https://yourapi.com').then(response => response.json()).then(json => this.setState({\n          apiData: json.title\n        })).then(setTimeout(() => this.setState({\n          reloading: false\n        }), 1000));\n      }\n    };\n\n    this.handleFullscreen = () => {\n      this.setState({\n        fullscreened: !this.state.fullscreened\n      });\n    };\n\n    this.state = {\n      randomId: uuidv4(),\n      hideWidget: false,\n      collapseWidget: !!props.collapsed,\n      height: props.collapsed ? 0 : 'auto',\n      fullscreened: false,\n      reloading: false,\n      modal: false,\n      apiData: ''\n    };\n  }\n\n  render() {\n    const {\n      title,\n      className,\n      children,\n      close,\n      fullscreen,\n      collapse,\n      refresh,\n      settings,\n      settingsInverse,\n      tooltipPlacement,\n      showTooltip,\n      bodyClass,\n      customControls,\n      customClose,\n      customExpand,\n      customCollapse,\n      customFullscreen,\n      customReload,\n      fetchingData,\n      customDropDown,\n      customBody,\n      prompt,\n      collapsed,\n      widgetType,\n      updateWidgetData,\n      options,\n      //eslint-disable-line\n      ...attributes\n    } = this.props;\n    const mainControls = !!(close || fullscreen || collapse || refresh || settings || settingsInverse);\n    const {\n      reloading,\n      fullscreened,\n      randomId,\n      height,\n      hideWidget,\n      collapseWidget,\n      modal\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        style: {\n          display: hideWidget ? 'none' : ''\n        },\n        className: classNames('widget', {\n          'fullscreened': !!fullscreened,\n          'collapsed': !!collapseWidget\n        }, s.widget, className, reloading || fetchingData ? s.reloading : ''),\n        ...attributes,\n        children: [title && (typeof title === 'string' ? /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: s.title,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"header\", {\n          className: s.title,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this)), !customControls && mainControls && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${s.widgetControls} widget-controls`,\n          children: [settings && /*#__PURE__*/_jsxDEV(\"button\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"la la-cog\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this), settingsInverse && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `bg-gray-transparent ${s.inverse}`,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"la la-cog text-white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 72\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this), refresh && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleReload,\n            id: `reloadId-${randomId}`,\n            children: [typeof refresh === 'string' ? /*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"text-gray-light\",\n              children: refresh\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"la la-refresh\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 21\n            }, this), showTooltip && /*#__PURE__*/_jsxDEV(UncontrolledTooltip, {\n              placement: tooltipPlacement,\n              target: `reloadId-${randomId}`,\n              children: \"Reload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this), fullscreen && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleFullscreen,\n            id: `fullscreenId-${randomId}`,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: `glyphicon glyphicon-resize-${fullscreened ? 'small' : 'full'}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 19\n            }, this), showTooltip && /*#__PURE__*/_jsxDEV(UncontrolledTooltip, {\n              placement: tooltipPlacement,\n              target: `fullscreenId-${randomId}`,\n              children: \"Fullscreen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }, this), !fullscreened && collapse && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.handleCollapse,\n              id: `collapseId-${randomId}`,\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: `la la-angle-${!collapseWidget ? 'down' : 'up'}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this), showTooltip && /*#__PURE__*/_jsxDEV(UncontrolledTooltip, {\n                placement: tooltipPlacement,\n                target: `collapseId-${randomId}`,\n                children: \"Collapse\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 19\n          }, this), !fullscreened && (close && !prompt ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleClose,\n            id: `closeId-${randomId}`,\n            children: [typeof close === 'string' ? /*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"text-gray-light\",\n              children: close\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"la la-remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 21\n            }, this), showTooltip && /*#__PURE__*/_jsxDEV(UncontrolledTooltip, {\n              placement: tooltipPlacement,\n              target: `closeId-${randomId}`,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.toggleModal,\n            id: `closeId-${randomId}`,\n            children: [typeof close === 'string' ? /*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"text-gray-light\",\n              children: close\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"la la-remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 19\n            }, this), showTooltip && /*#__PURE__*/_jsxDEV(UncontrolledTooltip, {\n              placement: tooltipPlacement,\n              target: `closeId-${randomId}`,\n              children: \"Modal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), customDropDown && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${s.widgetControls} widget-controls`,\n          children: /*#__PURE__*/_jsxDEV(UncontrolledDropdown, {\n            children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n              tag: \"span\",\n              \"data-toggle\": \"dropdown\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"glyphicon glyphicon-cog\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n              className: \"bg-widget-transparent\",\n              right: true,\n              children: [/*#__PURE__*/_jsxDEV(DropdownItem, {\n                onClick: this.handleReload,\n                title: \"Reload\",\n                children: [\"Reload \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"badge badge-pill badge-success animate__animated animate__bounceIn\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"9\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n                onClick: this.handleFullscreen,\n                title: !fullscreened ? \"Full Screen\" : \"Restore\",\n                children: [!fullscreened ? \"Fullscreen\" : \"Restore\", \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n                divider: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 17\n              }, this), !fullscreened && (!prompt ? /*#__PURE__*/_jsxDEV(DropdownItem, {\n                onClick: this.handleClose,\n                title: \"Close\",\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 46\n              }, this) : /*#__PURE__*/_jsxDEV(DropdownItem, {\n                onClick: this.toggleModal,\n                title: \"Close\",\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), customControls && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${s.widgetControls} widget-controls`,\n          children: [!fullscreened && (customClose && !prompt ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleClose,\n            id: `closeId-${randomId}`,\n            className: s.customControlItem,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              title: \"Close\",\n              className: \"glyphicon glyphicon-remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 111\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.toggleModal,\n            id: `closeId-${randomId}`,\n            className: s.customControlItem,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              title: \"Close\",\n              className: \"glyphicon glyphicon-remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 113\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 19\n          }, this)), !fullscreened && customCollapse && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleCollapse,\n            id: `closeId-${randomId}`,\n            className: s.customControlItem,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              title: \"Collapse\",\n              className: `glyphicon glyphicon-chevron-${!collapseWidget ? 'down' : 'up'}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 116\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 19\n          }, this), customFullscreen && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleFullscreen,\n            id: `closeId-${randomId}`,\n            className: s.customControlItem,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              title: \"Fullscreen\",\n              className: `glyphicon glyphicon-resize-${fullscreened ? 'small' : 'full'}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 118\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 19\n          }, this), customReload && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleReload,\n            id: `closeId-${randomId}`,\n            className: s.customControlItem,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              title: \"I am spinning!\",\n              className: \"fa fa-refresh\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 114\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AnimateHeight, {\n          duration: 500,\n          height: height,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${s.widgetBody} widget-body ${bodyClass}`,\n            children: reloading || fetchingData ? /*#__PURE__*/_jsxDEV(Loader, {\n              className: s.widgetLoader,\n              size: 40\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 43\n            }, this) : customBody ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"jumbotron handle bg-default text-white mb-0\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"container\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"Draggable story!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 331,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"lead\",\n                  children: [/*#__PURE__*/_jsxDEV(\"em\", {\n                    children: \"Build\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 21\n                  }, this), \" your own interfaces! Sit back and relax.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: this.handleFullscreen,\n                    className: \"btn btn-danger btn-lg\",\n                    children: !fullscreened ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n                      children: [\"Fullscreen me! \\xA0\", /*#__PURE__*/_jsxDEV(\"i\", {\n                        className: \"fa fa-check\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 340,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 339,\n                      columnNumber: 25\n                    }, this) : 'Go Back'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this) : children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }, this), prompt && /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: modal,\n        toggle: this.toggleModal,\n        id: \"news-close-modal\",\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: this.toggleModal,\n          id: \"news-close-modal-label\",\n          children: \"Sure?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          className: \"bg-white\",\n          children: \"Do you really want to unrevertably remove this super news widget?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"default\",\n            onClick: this.toggleModal,\n            \"data-dismiss\": \"modal\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 11\n          }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: this.closeWithModal,\n            id: \"news-widget-remove\",\n            children: \"Yes, remove widget\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: fullscreened ? 'block' : 'none'\n        },\n        className: s.widgetBackground\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nWidget.propTypes = {\n  title: PropTypes.node,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  close: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  fullscreen: PropTypes.bool,\n  collapse: PropTypes.bool,\n  refresh: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  settings: PropTypes.bool,\n  settingsInverse: PropTypes.bool,\n  tooltipPlacement: PropTypes.string,\n  showTooltip: PropTypes.bool,\n  bodyClass: PropTypes.string,\n  customControls: PropTypes.bool,\n  options: PropTypes.object,\n  //eslint-disable-line,\n  fetchingData: PropTypes.bool\n};\nWidget.defaultProps = {\n  title: null,\n  className: '',\n  children: [],\n  close: false,\n  fullscreen: false,\n  collapse: false,\n  refresh: false,\n  settings: false,\n  settingsInverse: false,\n  tooltipPlacement: 'bottom',\n  showTooltip: false,\n  bodyClass: '',\n  customControls: false,\n  customClose: null,\n  customExpand: null,\n  customCollapse: null,\n  customFullscreen: null,\n  customReload: null,\n  customDropDown: null,\n  prompt: false,\n  collapsed: false,\n  options: {},\n  fetchingData: false,\n  widgetType: \"\"\n};\nexport default Widget;","map":{"version":3,"sources":["/Users/joeyhu/Desktop/University/Unimelb/CloudComputing/A2/comp90024/src/Widget/Widget.js"],"names":["React","PropTypes","UncontrolledTooltip","DropdownToggle","DropdownMenu","DropdownItem","UncontrolledDropdown","Button","Modal","ModalHeader","ModalBody","ModalFooter","Widget","Component","constructor","props","toggleModal","setState","modal","state","handleClose","hideWidget","handleCollapse","heightValue","collapseWidget","height","reloading","closeWithModal","handleExpand","handleReload","widgetType","updateWidgetData","type","endpoint","setTimeout","fetch","then","response","json","apiData","title","handleFullscreen","fullscreened","randomId","uuidv4","collapsed","render","className","children","close","fullscreen","collapse","refresh","settings","settingsInverse","tooltipPlacement","showTooltip","bodyClass","customControls","customClose","customExpand","customCollapse","customFullscreen","customReload","fetchingData","customDropDown","customBody","prompt","options","attributes","mainControls","display","classNames","s","widget","widgetControls","inverse","customControlItem","widgetBody","widgetLoader","widgetBackground","propTypes","node","string","oneOfType","arrayOf","bool","object","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { UncontrolledTooltip } from 'reactstrap';\n\nimport {\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\n\nclass Widget extends React.Component {\n  static propTypes = {\n    title: PropTypes.node,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node,\n    ]),\n    close: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    fullscreen: PropTypes.bool,\n    collapse: PropTypes.bool,\n    refresh: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    settings: PropTypes.bool,\n    settingsInverse: PropTypes.bool,\n    tooltipPlacement: PropTypes.string,\n    showTooltip: PropTypes.bool,\n    bodyClass: PropTypes.string,\n    customControls: PropTypes.bool,\n    options: PropTypes.object, //eslint-disable-line,\n    fetchingData: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    title: null,\n    className: '',\n    children: [],\n    close: false,\n    fullscreen: false,\n    collapse: false,\n    refresh: false,\n    settings: false,\n    settingsInverse: false,\n    tooltipPlacement: 'bottom',\n    showTooltip: false,\n    bodyClass: '',\n    customControls: false,\n    customClose: null,\n    customExpand: null,\n    customCollapse: null,\n    customFullscreen: null,\n    customReload: null,\n    customDropDown: null,\n    prompt: false,\n    collapsed: false,\n    options: {},\n    fetchingData: false,\n    widgetType: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      randomId: uuidv4(),\n      hideWidget: false,\n      collapseWidget: !!props.collapsed,\n      height:  props.collapsed ? 0 : 'auto',\n      fullscreened: false,\n      reloading: false,\n      modal: false,\n      apiData: ''\n    }\n\n  }\n\n  toggleModal = () => {\n    this.setState({ modal: !this.state.modal });\n  }\n\n  handleClose = () => {\n    this.setState({ hideWidget: !this.state.hideWidget})\n  }\n\n  handleCollapse = () => {\n    let heightValue = this.state.collapseWidget ? 'auto' : 0\n    this.setState({\n      height: heightValue,\n      collapseWidget: !this.state.collapseWidget,\n      reloading: false\n    });\n\n  };\n\n  closeWithModal = () => {\n    this.toggleModal();\n    this.handleClose();\n  }\n\n  handleExpand = () => {\n\n    this.setState({\n      height: 'auto',\n      collapseWidget: false\n    });\n\n  };\n\n  handleReload = () => {\n    const { widgetType, updateWidgetData } = this.props;\n    const type = widgetType;\n    if(type) {\n      updateWidgetData(type)\n    }\n    this.setState({ reloading: true });\n    let endpoint = false;\n    if(!endpoint) {\n      setTimeout(() => this.setState({ reloading: false }),2000);\n    } else {\n      this.setState({ reloading: true });\n      fetch('https://yourapi.com')\n        .then(response => response.json())\n        .then(json => this.setState({ apiData: json.title}))\n        .then(setTimeout(() => this.setState({ reloading: false }), 1000))\n    }\n  }\n\n  handleFullscreen = () => {\n    this.setState({ fullscreened: !this.state.fullscreened });\n  }\n\n  render() {\n\n    const {\n      title,\n      className,\n      children,\n      close,\n      fullscreen,\n      collapse,\n      refresh,\n      settings,\n      settingsInverse,\n      tooltipPlacement,\n      showTooltip,\n      bodyClass,\n      customControls,\n      customClose,\n      customExpand,\n      customCollapse,\n      customFullscreen,\n      customReload,\n      fetchingData,\n      customDropDown,\n      customBody,\n      prompt,\n      collapsed,\n      widgetType,\n      updateWidgetData,\n      options, //eslint-disable-line\n      ...attributes\n    } = this.props;\n    const mainControls = !!(close || fullscreen || collapse || refresh || settings || settingsInverse);\n\n    const {\n      reloading,\n      fullscreened,\n      randomId,\n      height,\n      hideWidget,\n      collapseWidget,\n      modal,\n    } = this.state;\n\n\n\n    return (\n    <React.Fragment>\n      <section\n        style={{display: hideWidget ? 'none' : ''}}\n        className={\n          classNames('widget', {'fullscreened' : !!fullscreened, 'collapsed' : !!collapseWidget}, s.widget, className, (reloading || fetchingData) ? s.reloading : '')\n        } {...attributes}\n        >\n        {\n          title && (\n            typeof title === 'string'\n              ? <h5 className={s.title}>{title}</h5>\n              : <header className={s.title}>{title}</header>\n          )\n        }\n\n        {\n          !customControls && mainControls && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              {settings && (\n                <button><i className=\"la la-cog\" /></button>\n              )}\n              {settingsInverse && (\n                <button className={`bg-gray-transparent ${s.inverse}`}><i\n                  className=\"la la-cog text-white\"\n                /></button>\n              )}\n              {refresh && (\n                <button onClick={this.handleReload} id={`reloadId-${randomId}`}>\n                  {typeof refresh === 'string' ?\n                    <strong className=\"text-gray-light\">{refresh}</strong> :\n                    <i className=\"la la-refresh\" />}\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`reloadId-${randomId}`}\n                    >Reload</UncontrolledTooltip>\n                  )}\n                </button>\n              )}\n              {fullscreen && (\n                <button onClick={this.handleFullscreen} id={`fullscreenId-${randomId}`}>\n                  <i className={`glyphicon glyphicon-resize-${fullscreened ? 'small' : 'full'}`} />\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`fullscreenId-${randomId}`}\n                    >Fullscreen</UncontrolledTooltip>\n                  )}\n                </button>\n              )}\n              {!fullscreened &&\n                collapse && (\n                  <span>\n                    <button onClick={this.handleCollapse} id={`collapseId-${randomId}`}>\n                    <i className={`la la-angle-${!collapseWidget ? 'down' : 'up'}`} />\n                      {showTooltip && (\n                        <UncontrolledTooltip\n                          placement={tooltipPlacement}\n                          target={`collapseId-${randomId}`}\n                        >Collapse</UncontrolledTooltip>\n                      )}\n                    </button>\n                  </span>\n                )\n              }\n              {!fullscreened && (\n                (close && !prompt) ? (\n                <button onClick={this.handleClose} id={`closeId-${randomId}`}>\n                  {typeof close === 'string' ?\n                    <strong className=\"text-gray-light\">{close}</strong> :\n                    <i className=\"la la-remove\" />}\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`closeId-${randomId}`}\n                    >Close</UncontrolledTooltip>\n                  )}\n                </button>\n              ) : (\n                <button onClick={this.toggleModal} id={`closeId-${randomId}`}>\n                {typeof close === 'string' ?\n                  <strong className=\"text-gray-light\">{close}</strong> :\n                  <i className=\"la la-remove\" />}\n                {showTooltip && (\n                  <UncontrolledTooltip\n                    placement={tooltipPlacement}\n                    target={`closeId-${randomId}`}\n                  >Modal</UncontrolledTooltip>\n                )}\n              </button>\n              ))}\n            </div>\n          )}\n          {customDropDown && (\n            <div className={`${s.widgetControls} widget-controls`}>\n            <UncontrolledDropdown>\n              <DropdownToggle\n                tag=\"span\"\n                data-toggle=\"dropdown\"\n\n              >\n                <i className=\"glyphicon glyphicon-cog\" />\n              </DropdownToggle>\n              <DropdownMenu className=\"bg-widget-transparent\" right>\n                <DropdownItem onClick={this.handleReload} title=\"Reload\">\n                  Reload &nbsp;&nbsp;\n                  <span className=\"badge badge-pill badge-success animate__animated animate__bounceIn\">\n                    <strong>9</strong>\n                  </span>\n                </DropdownItem>\n\n                <DropdownItem onClick={this.handleFullscreen} title={!fullscreened ? \"Full Screen\" : \"Restore\"}>{!fullscreened ? \"Fullscreen\" : \"Restore\"} </DropdownItem>\n                <DropdownItem divider />\n                {!fullscreened && (!prompt ? <DropdownItem onClick={this.handleClose} title=\"Close\">Close</DropdownItem>\n                : <DropdownItem onClick={this.toggleModal} title=\"Close\">Close</DropdownItem>)}\n              </DropdownMenu>\n            </UncontrolledDropdown>\n            </div>\n          )}\n        {\n          customControls && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              {!fullscreened && ((customClose && !prompt) ? (\n                <button onClick={this.handleClose} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"Close\" className=\"glyphicon glyphicon-remove\"/></button>\n              ) : (\n                  <button onClick={this.toggleModal} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"Close\" className=\"glyphicon glyphicon-remove\"/></button>\n              ))}\n              {!fullscreened && (customCollapse && (\n                  <button onClick={this.handleCollapse} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"Collapse\" className={`glyphicon glyphicon-chevron-${!collapseWidget ? 'down' : 'up'}`}/></button>\n              ))}\n              {customFullscreen && (\n                  <button onClick={this.handleFullscreen} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"Fullscreen\" className={`glyphicon glyphicon-resize-${fullscreened ? 'small' : 'full'}`} /></button>\n              )}\n              {customReload && (\n                  <button onClick={this.handleReload} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"I am spinning!\" className=\"fa fa-refresh\" /></button>\n              )}\n            </div>\n          )\n        }\n        <AnimateHeight\n          duration={ 500 }\n          height={ height }\n        >\n\n          <div className={`${s.widgetBody} widget-body ${bodyClass}`}>\n            {reloading || fetchingData ?  <Loader className={s.widgetLoader} size={40}/> : customBody ? (\n                <div className=\"jumbotron handle bg-default text-white mb-0\">\n                <div className=\"container\">\n                  <h1>Draggable story!</h1>\n                  <p className=\"lead\">\n                    <em>Build</em> your own\n                    interfaces! Sit back and relax.\n                  </p>\n                  <p className=\"text-center\">\n                    <button onClick={this.handleFullscreen} className=\"btn btn-danger btn-lg\">\n                      {!fullscreened ?\n                        <React.Fragment>Fullscreen me! &nbsp;\n                          <i className=\"fa fa-check\" />\n                        </React.Fragment>\n                        : 'Go Back'\n                      }\n                    </button>\n                  </p>\n                </div>\n              </div>\n            ) : children}\n          </div>\n\n       </AnimateHeight>\n\n      </section>\n      {prompt && (\n        <Modal isOpen={modal} toggle={this.toggleModal} id=\"news-close-modal\">\n        <ModalHeader toggle={this.toggleModal} id=\"news-close-modal-label\">Sure?</ModalHeader>\n        <ModalBody className=\"bg-white\">\n          Do you really want to unrevertably remove this super news widget?\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"default\" onClick={this.toggleModal} data-dismiss=\"modal\">No</Button>{' '}\n          <Button color=\"danger\" onClick={this.closeWithModal} id=\"news-widget-remove\">Yes,\n            remove widget</Button>\n        </ModalFooter>\n      </Modal>\n      )}\n      <div style={{display: fullscreened ? 'block'  : 'none'}} className={s.widgetBackground}></div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Widget;\n"]},"metadata":{},"sourceType":"module"}